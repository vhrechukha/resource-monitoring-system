services:
  telegraf:
    image: telegraf:latest
    env_file: configuration.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
      - mongo
      - nginx
      - elasticsearch
      - grafana
    links:
      - influxdb
      - mongo
      - nginx
      - elasticsearch
      - grafana
    ports:
      - "8125:8125/udp"
    user: root
    entrypoint: sh -c "sleep 60 && telegraf"
    networks:
      - monitor-net

  influxdb:
    platform: linux/x86_64
    image: influxdb:1.8-alpine
    env_file: configuration.env
    ports:
      - '127.0.0.1:8086:8086'
    volumes:
      - ./:/imports
      - influxdb_data:/var/lib/influxdb
    networks:
      - monitor-net

  grafana:
    image: grafana/grafana:8.0.2
    depends_on:
      - influxdb
    env_file: configuration.env
    links:
      - influxdb
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-mongodb-datasource
    ports:
      - '127.0.0.1:3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitor-net

  mongo:
    image: mongo:4.4
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - monitor-net

  elasticsearch:
    platform: linux/x86_64
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitor-net

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - monitor-net
  
  rust_app:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    env_file: configuration.env
    ports:
      - "8080:8080"
    depends_on:
      - mongo
      - telegraf
    entrypoint: sh -c "sleep 70 && cargo run --release"
    networks:
      - monitor-net


volumes:
  grafana_data: {}
  influxdb_data: {}
  mongo_data: {}

networks:
  monitor-net:
    driver: bridge
